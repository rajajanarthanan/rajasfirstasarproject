// Mocks generated by Mockito 5.4.5 from annotations
// in rajas_first_asar_game/test/mocks/socketio_mock.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i5;

import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i4;
import 'package:socket_io_client/src/manager.dart' as _i2;
import 'package:socket_io_client/src/socket.dart' as _i3;
import 'package:socket_io_common/src/util/event_emitter.dart' as _i6;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeManager_0 extends _i1.SmartFake implements _i2.Manager {
  _FakeManager_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

class _FakeSocket_1 extends _i1.SmartFake implements _i3.Socket {
  _FakeSocket_1(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [Socket].
///
/// See the documentation for Mockito's code generation for more information.
class MockSocket extends _i1.Mock implements _i3.Socket {
  MockSocket() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.Manager get io => (super.noSuchMethod(
        Invocation.getter(#io),
        returnValue: _FakeManager_0(
          this,
          Invocation.getter(#io),
        ),
      ) as _i2.Manager);

  @override
  set io(_i2.Manager? _io) => super.noSuchMethod(
        Invocation.setter(
          #io,
          _io,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set id(String? _id) => super.noSuchMethod(
        Invocation.setter(
          #id,
          _id,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get connected => (super.noSuchMethod(
        Invocation.getter(#connected),
        returnValue: false,
      ) as bool);

  @override
  set connected(bool? _connected) => super.noSuchMethod(
        Invocation.setter(
          #connected,
          _connected,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get recovered => (super.noSuchMethod(
        Invocation.getter(#recovered),
        returnValue: false,
      ) as bool);

  @override
  set recovered(bool? _recovered) => super.noSuchMethod(
        Invocation.setter(
          #recovered,
          _recovered,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set auth(dynamic _auth) => super.noSuchMethod(
        Invocation.setter(
          #auth,
          _auth,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> get receiveBuffer => (super.noSuchMethod(
        Invocation.getter(#receiveBuffer),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  set receiveBuffer(List<dynamic>? _receiveBuffer) => super.noSuchMethod(
        Invocation.setter(
          #receiveBuffer,
          _receiveBuffer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  List<dynamic> get sendBuffer => (super.noSuchMethod(
        Invocation.getter(#sendBuffer),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  set sendBuffer(List<dynamic>? _sendBuffer) => super.noSuchMethod(
        Invocation.setter(
          #sendBuffer,
          _sendBuffer,
        ),
        returnValueForMissingStub: null,
      );

  @override
  String get nsp => (super.noSuchMethod(
        Invocation.getter(#nsp),
        returnValue: _i4.dummyValue<String>(
          this,
          Invocation.getter(#nsp),
        ),
      ) as String);

  @override
  set nsp(String? _nsp) => super.noSuchMethod(
        Invocation.setter(
          #nsp,
          _nsp,
        ),
        returnValueForMissingStub: null,
      );

  @override
  num get ids => (super.noSuchMethod(
        Invocation.getter(#ids),
        returnValue: 0,
      ) as num);

  @override
  set ids(num? _ids) => super.noSuchMethod(
        Invocation.setter(
          #ids,
          _ids,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, dynamic> get acks => (super.noSuchMethod(
        Invocation.getter(#acks),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  set acks(Map<dynamic, dynamic>? _acks) => super.noSuchMethod(
        Invocation.setter(
          #acks,
          _acks,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set subs(List<dynamic>? _subs) => super.noSuchMethod(
        Invocation.setter(
          #subs,
          _subs,
        ),
        returnValueForMissingStub: null,
      );

  @override
  Map<dynamic, dynamic> get flags => (super.noSuchMethod(
        Invocation.getter(#flags),
        returnValue: <dynamic, dynamic>{},
      ) as Map<dynamic, dynamic>);

  @override
  set flags(Map<dynamic, dynamic>? _flags) => super.noSuchMethod(
        Invocation.setter(
          #flags,
          _flags,
        ),
        returnValueForMissingStub: null,
      );

  @override
  set query(String? _query) => super.noSuchMethod(
        Invocation.setter(
          #query,
          _query,
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool get disconnected => (super.noSuchMethod(
        Invocation.getter(#disconnected),
        returnValue: false,
      ) as bool);

  @override
  bool get active => (super.noSuchMethod(
        Invocation.getter(#active),
        returnValue: false,
      ) as bool);

  @override
  _i3.Socket get volatile => (super.noSuchMethod(
        Invocation.getter(#volatile),
        returnValue: _FakeSocket_1(
          this,
          Invocation.getter(#volatile),
        ),
      ) as _i3.Socket);

  @override
  void subEvents() => super.noSuchMethod(
        Invocation.method(
          #subEvents,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Socket open() => (super.noSuchMethod(
        Invocation.method(
          #open,
          [],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #open,
            [],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket connect() => (super.noSuchMethod(
        Invocation.method(
          #connect,
          [],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #connect,
            [],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket send(List<dynamic>? args) => (super.noSuchMethod(
        Invocation.method(
          #send,
          [args],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #send,
            [args],
          ),
        ),
      ) as _i3.Socket);

  @override
  void emit(
    String? event, [
    dynamic data,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #emit,
          [
            event,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitWithAck(
    String? event,
    dynamic data, {
    Function? ack,
    bool? binary = false,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #emitWithAck,
          [
            event,
            data,
          ],
          {
            #ack: ack,
            #binary: binary,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i5.Future<dynamic> emitWithAckAsync(
    String? event,
    dynamic data, {
    Function? ack,
    bool? binary = false,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #emitWithAckAsync,
          [
            event,
            data,
          ],
          {
            #ack: ack,
            #binary: binary,
          },
        ),
        returnValue: _i5.Future<dynamic>.value(),
      ) as _i5.Future<dynamic>);

  @override
  void notifyOutgoingListeners(Map<dynamic, dynamic>? packet) =>
      super.noSuchMethod(
        Invocation.method(
          #notifyOutgoingListeners,
          [packet],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void packet(Map<dynamic, dynamic>? packet) => super.noSuchMethod(
        Invocation.method(
          #packet,
          [packet],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onopen([dynamic _0]) => super.noSuchMethod(
        Invocation.method(
          #onopen,
          [_0],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void sendConnectPacket(Map<dynamic, dynamic>? data) => super.noSuchMethod(
        Invocation.method(
          #sendConnectPacket,
          [data],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onerror(dynamic err) => super.noSuchMethod(
        Invocation.method(
          #onerror,
          [err],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onclose(dynamic reason) => super.noSuchMethod(
        Invocation.method(
          #onclose,
          [reason],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onpacket(dynamic packet) => super.noSuchMethod(
        Invocation.method(
          #onpacket,
          [packet],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onevent(Map<dynamic, dynamic>? packet) => super.noSuchMethod(
        Invocation.method(
          #onevent,
          [packet],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitEvent(List<dynamic>? args) => super.noSuchMethod(
        Invocation.method(
          #emitEvent,
          [args],
        ),
        returnValueForMissingStub: null,
      );

  @override
  Function ack(dynamic id) => (super.noSuchMethod(
        Invocation.method(
          #ack,
          [id],
        ),
        returnValue: () {},
      ) as Function);

  @override
  void onack(Map<dynamic, dynamic>? packet) => super.noSuchMethod(
        Invocation.method(
          #onack,
          [packet],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void onconnect(
    dynamic id,
    dynamic pid,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #onconnect,
          [
            id,
            pid,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void emitBuffered() => super.noSuchMethod(
        Invocation.method(
          #emitBuffered,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void ondisconnect() => super.noSuchMethod(
        Invocation.method(
          #ondisconnect,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void destroy() => super.noSuchMethod(
        Invocation.method(
          #destroy,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Socket close() => (super.noSuchMethod(
        Invocation.method(
          #close,
          [],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #close,
            [],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket disconnect() => (super.noSuchMethod(
        Invocation.method(
          #disconnect,
          [],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #disconnect,
            [],
          ),
        ),
      ) as _i3.Socket);

  @override
  void dispose() => super.noSuchMethod(
        Invocation.method(
          #dispose,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  _i3.Socket compress(dynamic compress) => (super.noSuchMethod(
        Invocation.method(
          #compress,
          [compress],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #compress,
            [compress],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket timeout(int? timeout) => (super.noSuchMethod(
        Invocation.method(
          #timeout,
          [timeout],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #timeout,
            [timeout],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket onAny(_i6.AnyEventHandler<dynamic>? handler) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAny,
          [handler],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #onAny,
            [handler],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket prependAny(_i6.AnyEventHandler<dynamic>? handler) =>
      (super.noSuchMethod(
        Invocation.method(
          #prependAny,
          [handler],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #prependAny,
            [handler],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket offAny([_i6.AnyEventHandler<dynamic>? handler]) =>
      (super.noSuchMethod(
        Invocation.method(
          #offAny,
          [handler],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #offAny,
            [handler],
          ),
        ),
      ) as _i3.Socket);

  @override
  List<dynamic> listenersAny() => (super.noSuchMethod(
        Invocation.method(
          #listenersAny,
          [],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  _i3.Socket onAnyOutgoing(_i6.AnyEventHandler<dynamic>? handler) =>
      (super.noSuchMethod(
        Invocation.method(
          #onAnyOutgoing,
          [handler],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #onAnyOutgoing,
            [handler],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket prependAnyOutgoing(_i6.AnyEventHandler<dynamic>? handler) =>
      (super.noSuchMethod(
        Invocation.method(
          #prependAnyOutgoing,
          [handler],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #prependAnyOutgoing,
            [handler],
          ),
        ),
      ) as _i3.Socket);

  @override
  _i3.Socket offAnyOutgoing([_i6.AnyEventHandler<dynamic>? handler]) =>
      (super.noSuchMethod(
        Invocation.method(
          #offAnyOutgoing,
          [handler],
        ),
        returnValue: _FakeSocket_1(
          this,
          Invocation.method(
            #offAnyOutgoing,
            [handler],
          ),
        ),
      ) as _i3.Socket);

  @override
  List<dynamic> listenersAnyOutgoing() => (super.noSuchMethod(
        Invocation.method(
          #listenersAnyOutgoing,
          [],
        ),
        returnValue: <dynamic>[],
      ) as List<dynamic>);

  @override
  void emitReserved(
    dynamic event, [
    dynamic data,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #emitReserved,
          [
            event,
            data,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  dynamic Function() on(
    String? event,
    _i6.EventHandler<dynamic>? handler,
  ) =>
      (super.noSuchMethod(
        Invocation.method(
          #on,
          [
            event,
            handler,
          ],
        ),
        returnValue: () => null,
      ) as dynamic Function());

  @override
  void once(
    String? event,
    _i6.EventHandler<dynamic>? handler,
  ) =>
      super.noSuchMethod(
        Invocation.method(
          #once,
          [
            event,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void off(
    String? event, [
    _i6.EventHandler<dynamic>? handler,
  ]) =>
      super.noSuchMethod(
        Invocation.method(
          #off,
          [
            event,
            handler,
          ],
        ),
        returnValueForMissingStub: null,
      );

  @override
  void clearListeners() => super.noSuchMethod(
        Invocation.method(
          #clearListeners,
          [],
        ),
        returnValueForMissingStub: null,
      );

  @override
  bool hasListeners(String? event) => (super.noSuchMethod(
        Invocation.method(
          #hasListeners,
          [event],
        ),
        returnValue: false,
      ) as bool);
}
